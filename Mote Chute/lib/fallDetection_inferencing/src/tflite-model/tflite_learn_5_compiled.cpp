/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 14.04.2025 13:12:39

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1424;
#else
constexpr int kTensorArenaSize = 400;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,39 } };
const TfArray<1, float> quant0_scale = { 1, { 0.37123748660087585, } };
const TfArray<1, int> quant0_zero = { 1, { -113 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data1[3] = { -77, 82, 12, };
const TfArray<1, int> tensor_dimension1 = { 1, { 3 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00046626210678368807, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data2[3*16] = { 
  56, -1, 89, -105, -28, 41, 74, -94, -125, 74, 54, -52, 55, -103, 36, 9, 
  71, 79, -16, -116, -124, 17, 36, -80, 25, -16, -33, 73, 8, 51, -14, 74, 
  -106, -22, 116, 29, -72, -91, -96, -45, 101, 31, 127, -90, -62, 81, -16, 45, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 3,16 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0050156973302364349, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[16] = { 54, 123, -89, 139, 73, -57, -53, 92, 110, -84, -32, 109, -75, 7, -74, 178, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00039681937778368592, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[16*32] = { 
  46, 59, 121, 74, -38, 6, -3, 41, -9, 30, -4, -2, -76, 33, 99, -61, 27, 63, 90, 52, -88, -45, 55, 7, 26, 48, 95, 88, 66, -29, -6, -94, 
  -40, 109, 23, 85, -16, -97, -35, 50, -73, -13, -44, 15, 71, 113, 74, 122, 82, 50, 37, -84, -57, -63, -13, -9, 32, 53, 78, -24, -82, -85, 103, -32, 
  -27, 10, -52, 4, 24, -25, 23, 44, 110, 4, 70, 54, 52, -96, -13, 81, -73, 18, 56, -67, -22, 5, 92, 20, 76, 64, -68, 5, -94, 27, 82, 67, 
  44, -71, 22, -6, 96, 1, -65, 69, 34, -78, -9, 78, 24, -55, -59, 7, -64, 1, -40, -47, 57, -30, 79, 77, 64, -49, 55, -12, 16, -52, -48, 6, 
  -43, -43, -85, -39, -69, -71, 49, 80, -80, -12, -26, -56, -8, -48, 7, -29, 61, 111, 80, -55, -104, 127, 42, 36, -88, -55, -4, 51, 60, 78, 112, -37, 
  -81, 65, 49, 57, -24, -92, -49, 94, -86, 51, -38, -36, 65, 70, -89, -29, -62, 97, 71, 39, 3, 6, -71, 65, -34, 75, -9, -8, 48, -24, -53, -93, 
  76, -2, 29, 55, -94, -23, 28, 14, 39, -76, 48, -92, -33, -14, 16, 52, -34, -103, -66, 64, -17, 15, -78, -77, -67, -32, 85, -40, -93, 31, -71, -43, 
  -21, 77, -12, -87, -75, 80, 95, 51, 62, 64, 83, 88, 78, 81, 35, 31, 15, 6, -110, -25, 97, 36, 102, 28, -10, 97, 6, -120, 73, -33, 76, 67, 
  61, -63, 102, 86, 33, -35, 90, 65, -25, -59, -63, 72, 95, -14, -89, 111, -24, -23, 58, 65, 25, 58, -15, -22, 41, -91, 115, -8, -1, -91, 80, -36, 
  32, -79, 34, 64, -47, 71, 62, 48, -29, -45, -23, -65, -7, 41, -40, 21, -14, -81, -55, 79, -34, 40, -43, 81, -31, 90, -83, -83, -77, 75, -24, 67, 
  -73, -43, -50, 30, 46, -35, 82, -20, -78, -86, -13, -14, -23, -92, -78, 17, -46, -11, -37, 44, -47, 45, -6, 110, -4, 22, -19, 80, 18, 51, 74, 66, 
  -92, 70, -41, 101, 58, 6, -60, -57, -55, -54, 31, 20, 95, -86, 10, 57, -33, 24, -81, 76, -91, -87, -87, -38, 106, 85, 71, -77, 77, -72, 48, -86, 
  -86, 48, -86, 90, -35, 1, 81, -21, 45, -4, -92, -36, -96, 50, -91, -32, 56, 48, 82, 16, 43, -95, -56, 55, -102, -71, -33, -7, 30, 47, 5, 28, 
  14, -19, -24, -49, -102, 60, -53, -45, 61, 39, -47, 2, -105, -84, -51, -75, -51, 16, 86, -2, 71, -105, -70, 55, -15, 10, 3, -92, 65, -60, 10, -2, 
  46, -8, 60, -41, -28, 53, 13, -69, -15, 78, 81, 16, -22, -14, 45, -82, 76, -113, 10, 91, 13, -93, -1, -89, 82, -51, -34, -46, -104, 86, -1, -74, 
  71, 91, 23, -21, 19, -54, -40, 68, 3, -19, 63, -17, 23, -30, 34, 67, -64, -38, 51, -44, -90, -13, 27, 26, 74, -30, 60, -77, 19, 99, 3, 53, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 16,32 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0034552186261862516, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[32] = { -37, 54, 82, 51, 77, -18, 40, -13, 13, -26, -37, 15, 48, 24, 57, 83, -11, 46, 30, 7, 16, -19, 47, 7, 68, -25, 53, -16, 36, -30, 66, -35, };
const TfArray<1, int> tensor_dimension5 = { 1, { 32 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0010583841940388083, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[32*39] = { 
  -12, -88, -54, 70, -21, 20, 35, 7, 13, 6, 23, -30, -27, -96, 102, -78, -45, 56, -84, 45, 53, 94, -33, 49, -49, 64, 2, -37, -9, -48, -77, 86, 58, -33, 36, 80, 16, 46, -78, 
  -75, -83, -31, 94, -74, 60, 41, -31, -35, -64, 77, -20, 22, 86, -5, 32, -83, -1, 17, -22, 104, -85, -86, 104, -8, -32, 75, -53, 7, 86, 27, 78, 2, 105, -53, -88, 76, 12, 45, 
  90, -63, -75, 76, 80, 125, 63, 14, -76, 54, 24, -5, 91, -25, -107, -7, -34, -66, -59, -66, 79, 76, 40, 7, -104, 37, 105, -7, -13, 34, 58, -14, 110, 67, 82, 20, -25, -39, -22, 
  -63, 97, 65, 2, 120, 68, 50, 108, 77, -32, -73, 47, 101, -16, 78, 45, 19, 43, 54, 7, 96, 61, -90, -89, 29, -79, -27, 77, -20, 42, 79, 86, -13, -74, 100, -79, 50, -95, -71, 
  107, -61, -7, 80, -27, -31, -79, 59, -78, -50, 42, -67, 4, 5, -57, -24, -6, 6, -83, -41, 84, -72, -44, 56, -102, -6, 9, -29, 93, 127, 15, -38, -106, -34, -83, 48, -40, -56, -59, 
  -38, 44, -15, 9, -89, -48, -22, -79, 10, -27, -99, 18, -73, -22, -17, 63, -83, 27, -84, 20, 69, 17, 23, -17, 73, 62, -41, 35, -36, -6, 7, 39, 85, -47, 82, 25, -97, 23, 60, 
  68, -13, -80, -37, -31, -47, -48, 18, 36, -113, -54, -73, 9, -75, -42, -23, -72, -19, -91, 89, -11, -105, 75, -19, 68, -24, 39, -16, -1, -23, 3, -106, -76, -15, -89, -4, -77, -30, -48, 
  68, 72, -16, 53, -19, -41, 60, 83, 52, 38, -42, -92, -5, 34, -79, -13, -3, 44, 55, 16, 10, -74, -31, -104, 19, -26, -76, -9, -62, -96, -66, -6, 57, -112, 33, -95, -91, -87, 28, 
  43, -12, -20, -72, -35, -16, -11, -100, -51, -42, 35, -55, -34, 80, 38, 69, -41, -38, -89, 29, -23, -102, 55, -100, -52, -58, -89, -37, -52, 83, -49, -26, -96, -33, -20, 7, 92, 38, -87, 
  -93, 88, -4, -89, -48, -64, -73, 20, 43, -73, -7, 106, -32, -93, -58, 101, -27, 78, 91, -20, -79, 67, 30, -50, 80, 31, 90, -73, -78, -1, 76, -99, 41, -46, 28, 57, 88, -13, -91, 
  88, -93, 31, -111, -76, -16, -85, -103, 61, -71, 6, 11, -76, 9, -44, 85, 85, -90, 15, 38, -84, -17, -60, 49, -70, 45, -105, 78, -70, 89, 47, 43, 38, 59, 65, -63, 18, -50, 15, 
  -7, -64, -107, 35, 38, 81, 88, 43, 44, 3, -39, 34, 63, -60, 73, 19, -67, -38, -10, -66, 7, 59, 10, 15, -5, 33, 0, -68, -18, -87, -83, -62, -7, 17, 44, 45, -47, 77, -35, 
  -30, 27, -19, 81, -46, -63, -11, -23, -45, 77, -1, -23, -46, 85, 3, 37, 89, 90, -69, 48, -95, -41, -66, 72, -78, -25, -72, 70, 13, 106, 3, 81, -1, -65, 51, -82, 73, -85, -37, 
  36, 11, 60, 68, 34, -2, -82, 109, -16, -45, -94, -23, -47, 72, -19, -55, 39, 44, 56, 102, -68, 30, 106, 82, -40, 99, -55, -33, -109, -60, 110, 100, -47, -84, -91, 27, 66, -39, -46, 
  112, -19, -106, -19, 100, 63, 12, -27, -71, 76, -85, 102, 45, 66, -88, -102, 121, -14, 82, 78, -38, -73, 83, -76, -75, -98, 13, 46, 71, -60, -82, -53, -74, 4, -74, 98, 61, 78, 41, 
  23, 45, -59, -61, 126, 64, 5, 102, 106, -12, 16, -76, 27, 2, -61, 4, -3, -26, 68, 71, -11, -21, 23, -5, 34, 31, 119, 68, -44, -35, -48, -44, 68, 50, -76, 86, 47, 61, 32, 
  9, 67, 28, -91, -22, 42, 12, -83, 59, 60, -75, 105, 92, 55, -17, 42, 69, -63, -22, -60, 84, -78, -58, -62, 63, 4, -85, -90, -38, 56, -10, -88, 45, 24, 102, -10, -5, 43, -68, 
  15, -93, -48, 117, 118, 51, -72, 22, 33, 4, -66, 75, -12, -46, -63, -68, 29, -3, 22, 0, 10, 76, -76, -4, 90, -93, -14, 47, -66, -42, -51, 66, 15, -39, 67, 82, -86, -13, -29, 
  -85, 53, 45, -50, 77, 3, -71, -62, 100, -11, 13, 42, 109, 105, 74, -34, -42, -56, -17, -82, -53, 114, -80, 29, 107, -66, 18, 37, 71, -45, -94, -18, -7, -8, 0, -53, 32, 99, 46, 
  -3, 91, -20, 28, 39, 75, 89, 47, 44, -102, -12, 80, -64, 85, -10, -20, 65, 83, -53, 95, 86, 22, 89, -100, -41, -71, 90, 86, -71, -84, -9, -71, -15, 91, -56, 61, 15, 93, -53, 
  -9, 2, -73, -18, -56, -86, -29, -69, 43, -49, 67, 78, -17, -54, 47, 70, 13, -98, 67, -102, -89, 56, -38, -93, 3, -15, -83, 55, -74, -6, -67, 61, -84, -80, 42, 69, -25, -93, 81, 
  -15, -74, -8, -37, -4, 86, 12, -100, 74, 86, 65, -62, -98, -54, 114, 72, -75, -53, -71, -43, 77, -33, 62, -60, 12, -63, 72, 38, -39, 35, -5, 24, 23, 44, 9, 69, 37, 16, -104, 
  -6, -57, -39, 27, 32, -17, 88, -8, -82, -71, 47, 45, -63, 82, 99, -7, 4, 94, -82, -92, -86, -30, -106, -82, 15, 37, -88, -27, 5, -78, -11, -31, -98, -71, 78, 2, 74, -76, -68, 
  51, -82, 109, -33, -42, -85, -8, -35, 2, 47, -48, 38, 67, -99, 25, 66, -43, -94, 73, -30, -57, -20, -29, 11, 43, 48, 31, 43, -56, 46, 44, 45, -17, 38, 65, -95, -71, -66, 58, 
  41, -24, -102, 53, -76, 82, -66, 76, -12, 77, 50, 21, 80, 105, 54, -3, 4, 100, 49, 49, -51, -16, -109, -34, -90, 5, 37, -110, -49, 81, 90, 31, 121, -68, -99, 73, 40, 38, -11, 
  67, 81, -60, 22, 84, 14, -43, -105, 69, -62, 39, 103, -11, 74, -38, -34, -60, -10, -23, -104, -57, 18, 78, 36, -22, 48, 94, -49, 69, 48, 54, -53, -98, -6, -28, -1, -11, -79, -29, 
  -11, 63, -96, 81, 52, 27, -76, 41, -50, -37, -59, -66, -94, 72, 74, -15, 14, 86, -32, -38, 1, 105, -37, 46, -107, 11, -43, -46, -67, -46, -2, 23, -4, 66, -60, 87, -33, 20, -23, 
  -106, 12, -66, -17, 9, 78, -88, 61, 40, 78, -46, -46, -15, -71, 57, 111, -72, 95, -50, -39, -91, 14, -59, 30, 100, 39, 23, -63, 9, -33, 41, 21, 27, 21, -57, 70, -65, 78, 98, 
  110, 99, 42, 97, -60, -3, 49, 37, -59, 47, -38, -40, 62, -7, -55, 56, -36, 97, 60, 13, 12, 57, 93, 31, 12, -41, -16, -118, 67, -80, 43, -80, -87, -15, -85, 59, 69, -24, 106, 
  35, -6, 107, -2, 73, -112, 31, 80, 11, -38, 64, -49, -81, -20, 108, 78, 63, -25, -31, -89, -16, -45, 52, 50, -75, 49, 60, 92, -56, 85, -89, -22, -84, 36, -78, 9, -69, 14, 72, 
  44, -76, 26, -8, 14, 53, 33, -77, 37, -61, -13, 30, 65, -27, 93, -4, 72, 96, 82, -33, -25, -45, -98, -99, -52, -31, -1, 6, 115, 48, 62, -10, 36, 29, -83, -55, -43, -9, 52, 
  23, 58, -81, 15, -25, -35, 70, -66, -74, -48, -39, 61, -96, -65, -78, 48, 48, -29, 10, 4, -50, 6, -2, 69, -10, 72, 66, 77, 28, 14, -21, -15, 61, -42, -59, -25, -17, -2, 47, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 32,39 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0028509625699371099, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,32 } };
const TfArray<1, float> quant7_scale = { 1, { 0.11484638601541519, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,16 } };
const TfArray<1, float> quant8_scale = { 1, { 0.092960573732852936, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,3 } };
const TfArray<1, float> quant9_scale = { 1, { 0.091169528663158417, } };
const TfArray<1, int> quant9_zero = { 1, { 24 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,3 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 39, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 1248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 48), (TfLiteIntArray*)&g0::tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
